import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Arrays;
import java.util.Timer;
import java.util.TimerTask;

import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JPanel;
import javax.swing.JTextField;

public class ConnectFour extends Buttons implements ActionListener{
	static final long serialVersionUID = 1L;
	static ImageIcon ic1 = new ImageIcon("C:\\Users\\Jonathan\\pictures\\java\\white.png");
	static ImageIcon ic2 = new ImageIcon("C:\\Users\\Jonathan\\pictures\\java\\RED.png");
	static ImageIcon ic3 = new ImageIcon("C:\\Users\\Jonathan\\pictures\\java\\Yellow.jpg");
	
	static Buttons[][] btn= new Buttons[9][7];
	int[][] arr= new int[9][7];
	
	static ConnectFour cf;
	
	static int score1, score2;
	
	static boolean end;
	static int row;
	static int col;
	static int turn;
	
	static JTextField Turn, S1, S2;
	static int total;
	
	public static void main(String[] args) {
			cf.setVisible(true);
	}
	/*
	 * Working on making a timer between each turn, but have not finished yet
	static int sec=0;
	
	
	static Timer timer=new Timer();
	static TimerTask task= new TimerTask() {
		public void run() {
			while(sec<=total) {
				sec++;
				System.out.println(sec);
			}
		}
		
		
	};
	
	public static void Start() {
		timer.scheduleAtFixedRate(task, 1000, 1000);
		System.out.println("going to this");
	}
	*/
	
	public ConnectFour() {
		super();
		setSize(100, 100);
		setResizable(false);
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		
		turn=1;
		
		Font font = new Font("SansSerif", Font.BOLD, 60);
		Font f2= new Font("Ariel", Font.PLAIN, 30);
		JPanel text = new JPanel(new FlowLayout());
		JPanel panel = new JPanel(new GridLayout(9,7,7,9));
		JPanel p2= new JPanel(new FlowLayout());

		JButton newGame= new JButton("New Game");
		JButton exit= new JButton("Exit");
		newGame.setPreferredSize(new Dimension(200,100));
		newGame.setBackground(Color.DARK_GRAY);
		newGame.setFont(f2);
		newGame.setForeground(Color.ORANGE);
		//newGame.setVerticalAlignment(SwingConstants.CENTER);
		
		exit.setPreferredSize(new Dimension(200,100));
		exit.setBackground(Color.DARK_GRAY);
		exit.setFont(f2);
		exit.setForeground(Color.ORANGE);
		//exit.setHorizontalAlignment(SwingConstants.CENTER);
		
		p2.add(newGame, BorderLayout.EAST);
		p2.add(exit, BorderLayout.WEST);
		newGame.addActionListener(actions);
		exit.addActionListener(actions);
		
		text.setBackground(Color.CYAN);
		panel.setBackground(Color.BLUE);
		p2.setBackground(Color.DARK_GRAY);
		p2.setPreferredSize(new Dimension(10, 70));
		
		
		Turn = new JTextField("It is " + NameAsk.getName1()+ "'s turn!",15);
		Turn.setHorizontalAlignment(JTextField.CENTER);
		Turn.setFont(font);
		Turn.setBackground(Color.CYAN);
		
		S1=new JTextField(NameAsk.getName1()+":"+score1);
		S2=new JTextField(NameAsk.getName2()+":"+score2);
		S1.setBackground(Color.CYAN);
		S2.setBackground(Color.CYAN);
		S1.setHorizontalAlignment(JTextField.CENTER);
		S2.setHorizontalAlignment(JTextField.CENTER);
		S1.setFont(f2);
		S2.setFont(f2);
		
		text.add(S1, BorderLayout.EAST);
		text.add(Turn, FlowLayout());
		text.add(S2, BorderLayout.WEST);
		
		
		for (int[] r: arr) {
		      Arrays.fill(r, 0);
		}
		for(int i = 0; i< 9; i++) {
			for(int j=0;j<7;j++) {
				row =i;
				col=j;
				JButton jb=new JButton(row+","+col);
				btn[i][j] = new Buttons(jb, row+","+col,ic1);
				
				
				// Set the image icon here
				
				btn[i][j].getJB().setPreferredSize(new Dimension(20,70));
				btn[i][j].setICtoJB(ic1);
				panel.add(btn[i][j].getJB());
				btn[i][j].getJB().addActionListener(actions);
				
			}
		}
		
		
		Turn.setPreferredSize(new Dimension(20, 70));
		Turn.setEditable(false);
		add(text, BorderLayout.NORTH);
		add(panel);
		add(p2,BorderLayout.SOUTH);
		pack();
		setVisible(true);
	}

	private Object FlowLayout() {
		// TODO Auto-generated method stub
		return null;
	}

	private ActionListener actions = new ActionListener() {
		@Override
		public void actionPerformed(ActionEvent e) {
			String name = e.getActionCommand();
			if(name.equals("New Game")) {
				for (int[] r: arr) {
				      Arrays.fill(r, 0);
				}
				for(int i=0;i<btn.length;i++) {
					for(int j=0;j<btn[0].length;j++) {
						btn[i][j].setICtoJB(ic1);
					}
				}
				
			}
			if(name.equals("Exit")) {
				new NameAsk().setVisible(true);
				cf.dispose();
				
			}
			if(!end) {
				for(int r=btn.length-1;r>=0;r--) {
					if(name.equals(btn[r][0].getPos())) {
						changeTurn();
						col=0;
						row =checkRow(col);
						if(row==0&&arr[row][col]!=0) {
							break;
						}
						if(turn==1) {
							btn[row][col].setICtoJB(ic2);
							arr[row][col] = 1;
							turn=2;
						}
						else {
							btn[row][col].setICtoJB(ic3);
							arr[row][col] = 2;
							turn=1;
						}
	
					}
					else if(name.equals(btn[r][1].getPos())) {
						changeTurn();
						col=1;
						row =checkRow(1);
						if(row==0&&arr[row][col]!=0) {
							break;
						}
						if(turn==1) {
							btn[row][col].setICtoJB(ic2);
							arr[row][col] = 1;
							turn=2;
						}
						else {
							btn[row][col].setICtoJB(ic3);
							arr[row][col] = 2;
							turn=1;
						}

					}
					else if(name.equals(btn[r][2].getPos())) {
						changeTurn();
						col=2;
						row =checkRow(2);
						if(row==0&&arr[row][col]!=0) {
							break;
						}
						if(turn==1) {
							btn[row][col].setICtoJB(ic2);
							arr[row][col] = 1;
							turn=2;
						}
						else {
							btn[row][col].setICtoJB(ic3);
							arr[row][col] = 2;
							turn=1;
						}
		

					}
					else if(name.equals(btn[r][3].getPos())) {
						changeTurn();
						col=3;
						row =checkRow(3);
						if(row==0&&arr[row][col]!=0) {
							break;
						}
						if(turn==1) {
							btn[row][col].setICtoJB(ic2);
							arr[row][col] = 1;
							turn=2;
						}
						else {
							btn[row][col].setICtoJB(ic3);
							arr[row][col] = 2;
							turn=1;
						}

					}
					else if(name.equals(btn[r][4].getPos())) {
						changeTurn();
						col=4;
						row =checkRow(4);
						if(row==0&&arr[row][col]!=0) {
							break;
						}
						if(turn==1) {
							btn[row][col].setICtoJB(ic2);
							arr[row][col] = 1;
							turn=2;
						}
						else {
							btn[row][col].setICtoJB(ic3);
							arr[row][col] = 2;
							turn=1;
						}

					}
					else if(name.equals(btn[r][5].getPos())) {
						changeTurn();
						col=5;
						row =checkRow(5);
						if(row==0&&arr[row][col]!=0) {
							break;
						}
						if(turn==1) {
							btn[row][col].setICtoJB(ic2);
							arr[row][col] = 1;
							turn=2;
						}
						else {
							btn[row][col].setICtoJB(ic3);
							arr[row][col] = 2;
							turn=1;
						}

					}
					else if(name.equals(btn[r][6].getPos())) {
						changeTurn();
						col=6;
						row =checkRow(6);
						if(row==0&&arr[row][col]!=0) {
							break;
						}
						if(turn==1) {
							btn[row][col].setICtoJB(ic2);
							arr[row][col] = 1;
							turn=2;
						}
						else {
							btn[row][col].setICtoJB(ic3);
							arr[row][col] = 2;
							turn=1;
						}
					}
				}
			}

			if(checkWinner()!=0) {
				if(!end) {
					if(checkWinner()==1) {
						score1++;
						S1.setText(NameAsk.getName1()+":"+ score1);
						Turn.setText(NameAsk.getName1()+" wins!");
					}
					else {
						score2++;
						S2.setText(NameAsk.getName2()+":"+ score2);
						Turn.setText(NameAsk.getName2()+" wins!");
					}
				}
				end=true;
			}
			else {
				end=false;
			}
		}
	};
			
		public int checkRow(int a) {
			int curRow=0;
			for(int i=arr.length-1;i>=0;i--) {
				curRow=i;
				if(arr[i][a]==0) {
					return i;
				}
			}
			return curRow;
			
		}
		public void changeTurn() {
			if(turn==1) {
				Turn.setText("It is " + NameAsk.getName2()+"'s turn!");
			}
			else if(turn ==2){
				Turn.setText("It is " + NameAsk.getName1()+"'s turn!");
			}
		}
		public int checkWinner() {
			int winner=0;
			for(int i=0;i<arr.length;i++) {
				for(int j=0;j<arr[0].length;j++){
					if(arr[i][j]!=0) {
						if(j<3 && i>4) {
							if(arr[i][j]==arr[i-1][j]&&arr[i][j]==arr[i-2][j]&&arr[i][j]==arr[i-3][j]) {
								winner =arr[i][j];
							}
							if(arr[i][j]==arr[i][j+1]&&arr[i][j]==arr[i][j+2]&&arr[i][j]==arr[i][j+3]) {
								winner =arr[i][j];
							}
						}
						if(j<3 && i<4) {
							if(arr[i][j]==arr[i+1][j]&&arr[i][j]==arr[i+2][j]&&arr[i][j]==arr[i+3][j]) {
								winner =arr[i][j];
							}
							if(arr[i][j]==arr[i][j+1]&&arr[i][j]==arr[i][j+2]&&arr[i][j]==arr[i][j+3]) {
								winner =arr[i][j];
							}
						}
						if(j>3 && i>4) {
							if(arr[i][j]==arr[i-1][j]&&arr[i][j]==arr[i-2][j]&&arr[i][j]==arr[i-3][j]) {
								winner =arr[i][j];
							}
							if(arr[i][j]==arr[i][j-1]&&arr[i][j]==arr[i][j-2]&&arr[i][j]==arr[i][j-3]) {
								winner =arr[i][j];
							}
						}
						if(j>3 && i<4) {
							if(arr[i][j]==arr[i+1][j]&&arr[i][j]==arr[i+2][j]&&arr[i][j]==arr[i+3][j]) {
								winner =arr[i][j];
								
							}
							if(arr[i][j]==arr[i][j-1]&&arr[i][j]==arr[i][j-2]&&arr[i][j]==arr[i][j-3]) {
								winner =arr[i][j];
							}
						}
						if(j<3&&i>4) {
							if(arr[i][j]==arr[i-1][j+1]&&arr[i][j]==arr[i-2][j+2]&&arr[i][j]==arr[i-3][j+3]) {
								winner=arr[i][j];
							}
						}
						if(j<3&&i<4) {
							if(arr[i][j]==arr[i+1][j+1]&&arr[i][j]==arr[i+2][j+2]&&arr[i][j]==arr[i+3][j+3]) {
								winner=arr[i][j];
							}
						}
						if(j>3&&i>4) {
							if(arr[i][j]==arr[i-1][j-1]&&arr[i][j]==arr[i-2][j-2]&&arr[i][j]==arr[i-3][j-3]) {
								winner=arr[i][j];
							}
						}
						if(j>3&&i<4) {
							if(arr[i][j]==arr[i+1][j-1]&&arr[i][j]==arr[i+2][j-2]&&arr[i][j]==arr[i+3][j-3]) {
								winner=arr[i][j];
							}
						}
						if(j==3&&i<4) {
							if(arr[i][j]==arr[i+1][j-1]&&arr[i][j]==arr[i+2][j-2]&&arr[i][j]==arr[i+3][j-3]) {
								winner=arr[i][j];
							}
							if(arr[i][j]==arr[i+1][j+1]&&arr[i][j]==arr[i+2][j+2]&&arr[i][j]==arr[i+3][j+3]) {
								winner=arr[i][j];
							}
							if(arr[i][j]==arr[i+1][j]&&arr[i][j]==arr[i+2][j]&&arr[i][j]==arr[i+3][j]) {
								winner =arr[i][j];
							}
							if(arr[i][j]==arr[i][j+1]&&arr[i][j]==arr[i][j+2]&&arr[i][j]==arr[i][j+3]) {
								winner =arr[i][j];
							}
							if(arr[i][j]==arr[i][j-1]&&arr[i][j]==arr[i][j-2]&&arr[i][j]==arr[i][j-3]) {
								winner =arr[i][j];
							}
						}
						if(j==3&&i>4) {
							if(arr[i][j]==arr[i-1][j-1]&&arr[i][j]==arr[i-2][j-2]&&arr[i][j]==arr[i-3][j-3]) {
								winner=arr[i][j];
							}
							if(arr[i][j]==arr[i-1][j+1]&&arr[i][j]==arr[i-2][j+2]&&arr[i][j]==arr[i-3][j+3]) {
								winner=arr[i][j];
							}
							if(arr[i][j]==arr[i-1][j]&&arr[i][j]==arr[i-2][j]&&arr[i][j]==arr[i-3][j]) {
								winner =arr[i][j];
							}
							if(arr[i][j]==arr[i][j+1]&&arr[i][j]==arr[i][j+2]&&arr[i][j]==arr[i][j+3]) {
								winner =arr[i][j];
							}
							if(arr[i][j]==arr[i][j-1]&&arr[i][j]==arr[i][j-2]&&arr[i][j]==arr[i][j-3]) {
								winner =arr[i][j];
							}
						}
						if(j<3&&i==4) {
							if(arr[i][j]==arr[i-1][j+1]&&arr[i][j]==arr[i-2][j+2]&&arr[i][j]==arr[i-3][j+3]) {
								winner=arr[i][j];
							}
							if(arr[i][j]==arr[i+1][j+1]&&arr[i][j]==arr[i+2][j+2]&&arr[i][j]==arr[i+3][j+3]) {
								winner=arr[i][j];
							}
							if(arr[i][j]==arr[i+1][j]&&arr[i][j]==arr[i+2][j]&&arr[i][j]==arr[i+3][j]) {
								winner =arr[i][j];
							}
							if(arr[i][j]==arr[i-1][j]&&arr[i][j]==arr[i-2][j]&&arr[i][j]==arr[i-3][j]) {
								winner =arr[i][j];
							}
							if(arr[i][j]==arr[i][j+1]&&arr[i][j]==arr[i][j+2]&&arr[i][j]==arr[i][j+3]) {
								winner =arr[i][j];
							}
						}
						if(j>3&&i==4) {
							if(arr[i][j]==arr[i-1][j-1]&&arr[i][j]==arr[i-2][j-2]&&arr[i][j]==arr[i-3][j-3]) {
								winner=arr[i][j];
							}
							if(arr[i][j]==arr[i+1][j-1]&&arr[i][j]==arr[i+2][j-2]&&arr[i][j]==arr[i+3][j-3]) {
								winner=arr[i][j];
							}
							if(arr[i][j]==arr[i+1][j]&&arr[i][j]==arr[i+2][j]&&arr[i][j]==arr[i+3][j]) {
								winner =arr[i][j];
							}
							if(arr[i][j]==arr[i-1][j]&&arr[i][j]==arr[i-2][j]&&arr[i][j]==arr[i-3][j]) {
								winner =arr[i][j];
							}
							if(arr[i][j]==arr[i][j-1]&&arr[i][j]==arr[i][j-2]&&arr[i][j]==arr[i][j-3]) {
								winner =arr[i][j];
							}
						}
						if(i==4&&j==3) {
							if(arr[i][j]==arr[i-1][j-1]&&arr[i][j]==arr[i-2][j-2]&&arr[i][j]==arr[i-3][j-3]) {
								winner=arr[i][j];
							}
							if(arr[i][j]==arr[i+1][j-1]&&arr[i][j]==arr[i+2][j-2]&&arr[i][j]==arr[i+3][j-3]) {
								winner=arr[i][j];
							}
							if(arr[i][j]==arr[i+1][j]&&arr[i][j]==arr[i+2][j]&&arr[i][j]==arr[i+3][j]) {
								winner =arr[i][j];
							}
							if(arr[i][j]==arr[i-1][j]&&arr[i][j]==arr[i-2][j]&&arr[i][j]==arr[i-3][j]) {
								winner =arr[i][j];
							}
							if(arr[i][j]==arr[i][j-1]&&arr[i][j]==arr[i][j-2]&&arr[i][j]==arr[i][j-3]) {
								winner =arr[i][j];
							}
							if(arr[i][j]==arr[i-1][j+1]&&arr[i][j]==arr[i-2][j+2]&&arr[i][j]==arr[i-3][j+3]) {
								winner=arr[i][j];
							}
							if(arr[i][j]==arr[i+1][j+1]&&arr[i][j]==arr[i+2][j+2]&&arr[i][j]==arr[i+3][j+3]) {
								winner=arr[i][j];
							}
							if(arr[i][j]==arr[i][j+1]&&arr[i][j]==arr[i][j+2]&&arr[i][j]==arr[i][j+3]) {
								winner =arr[i][j];
							}
						}
						
						
						
					}
						
				}
					
			}
			return winner;
		}
		public boolean checkBorder() {
			if(arr[row][col]!=0) {
				return true;
			}
			return false;
		}


		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			
		}

}

